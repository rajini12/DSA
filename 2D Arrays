#Given an m x n matrix, return all elements of the matrix in spiral order.
def spiralOrder(matrix):
    l,r = 0, len(matrix[0])-1
    u,d = 0 ,len(matrix)-1
    step=0
    result=[]
    while(l<=r and u<=d):
        match(step%4):
            case 0:
                for i in range(l,r+1):
                    result.append(matrix[u][i])
                u+=1
            case 1:
                for i in range(u,d+1):
                    result.append(matrix[i][r])
                r-=1
            case 2:
                for i in range(r,l-1,-1):
                    result.append(matrix[d][i])
                d-=1
            case 3:
                for i in range(d,u-1,-1):
                    result.append(matrix[i][l])
                l+=1
        step+=1
    return result
matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(spiralOrder(matrix))
   

#transpose of the matrix
def transpose(matrix):
        return [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]
        



#print snake pattern
def printsnake(matrix):
    for x in range(len(matrix)):
        if (x+1)%2==0:
            for y in range(1,len(matrix)+1):
                print(matrix[x][-y],end=" ")
        else:
            for y in range(len(matrix)):
                print(matrix[x][y],end=" ")
        print()
matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
print("matrix before: ", matrix)
printsnake(matrix)


#Rotate Array
def rotate(nums, k):
        k=k%len(nums)
        nums[:]=nums[-k:]+nums[:-k]
        print(nums)
nums=[1,2,3,4,5,6,7,8,9]
k=6
rotate(nums,k)



#You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
#You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
def rotate(matrix):
        matrix.reverse()
        print(matrix)
        for i in range(len(matrix)):
            for j in range(i):
                matrix[i][j], matrix[j][i]= matrix[j][i], matrix[i][j]
        print(matrix)
matrix=[[1,2,3],[4,5,6],[7,8,9]]
print(rotate(matrix))



#Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
#Integers in each row are sorted from left to right.
#The first integer of each row is greater than the last integer of the previous row.
def searchMatrix(matrix,target):
        n=[]
        for i in range(len(matrix)):
            n.extend(matrix[i])
        if target in n:
            return True
        else: 
            return False
matrix=[[1,2,3,4],[7,8,13,15]]
target=13
print(searchMatrix(matrix,target))



